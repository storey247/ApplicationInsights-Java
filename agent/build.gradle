/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'com.github.johnrengelman.shadow'
}

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"

def instrumentationVersion = '0.14.5'

def shadowPrefix = 'com.microsoft.applicationinsights.agent.shadow'

shadowJar() {

    archiveClassifier = 'intermediate'
    mergeServiceFiles()
    destinationDirectory = file("${project.buildDir}/intermediate")
    dependencies {
        exclude(dependency {
            it.moduleGroup == 'org.glowroot.instrumentation' &&
                    it.moduleName != 'instrumentation-api' &&
                    it.moduleName != 'instrumentation-engine'
        })
    }

    relocate('org.objectweb.asm', "${shadowPrefix}.org.objectweb.asm")
    relocate('org.slf4j', "${shadowPrefix}.org.slf4j")
    relocate('ch.qos.logback', "${shadowPrefix}.ch.qos.logback")
    relocate('com.google', "${shadowPrefix}.com.google")
    relocate 'org.checkerframework', "${shadowPrefix}.org.checkerframework"
    relocate 'javax.annotation', "${shadowPrefix}.javax.annotation"
    relocate 'org.codehaus.mojo.animal_sniffer', "${shadowPrefix}.org.codehaus.mojo.animal_sniffer"

    // this shades internal use of java util logging which is needed to prevent java util logging from being initialized
    // early (e.g. in the case of jboss which wants to do some setup before jul is initialized)
    relocate('java.util.logging', 'org.glowroot.instrumentation.engine.jul')

    relocate('logback.configurationFile', 'ai.logback.configurationFile')
    relocate('logback.xml', 'ai.logback.xml')
    relocate('logback.groovy', 'ai.logback.groovy') // to prevent accidentally picking up from user's class path
    relocate('logback-test.xml', 'ai.logback-test.xml') // to prevent accidentally picking up from user's class path

    relocate('glowroot.debug', 'ai.debug') // system property names

    exclude 'META-INF/maven/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/services/javax.servlet.ServletContainerInitializer'

    // prevent duplicate files
    exclude 'LICENSE'
    exclude 'NOTICE'

    // errorprone annotations are a problem in the bootstrap class loader for Java 9 because they depend on
    // javax.lang.model.element.Modifier which is no longer in the bootstrap class loader in Java 9, and this causes
    // spring class path scanning to fail when trying to read com.google.errorprone.annotations.ForOverride
    // (java.lang.NoClassDefFoundError: [Ljavax/lang/model/element/Modifier;)
    exclude 'com/google/errorprone/**'
}

task shadowJar2(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {

    dependsOn shadowJar

    from {
        zipTree(shadowJar.archiveFile)
    }

    configurations = [project.configurations.runtime]

    archiveClassifier = ''
    mergeServiceFiles()

    dependencies {
        include(dependency {
            it.moduleGroup == 'org.glowroot.instrumentation' &&
                    it.moduleName != 'instrumentation-api' &&
                    it.moduleName != 'instrumentation-engine'
        })
    }

    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'META-INF/instrumentation.list'
    }

    manifest {
        attributes("Premain-Class": "com.microsoft.applicationinsights.agent.internal.Premain",
                "Can-Redefine-Classes": "true",
                "Can-Retransform-Classes": "true",
                "agent-sdk-version": project.version
        )
    }
}

archivesBaseName = 'applicationinsights-agent'

jar {
    dependsOn shadowJar2
    enabled = false
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.26'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    compile "org.glowroot.instrumentation:instrumentation-engine:$instrumentationVersion"
    compile "com.google.guava:guava:27.1-android"
    compile "org.glowroot.instrumentation:instrumentation-api:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-executor:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-spring:$instrumentationVersion" // need for operation name
    runtime "org.glowroot.instrumentation:instrumentation-jaxrs:$instrumentationVersion" // need for operation name
    runtime "org.glowroot.instrumentation:instrumentation-struts:$instrumentationVersion" // need for operation name
    runtime "org.glowroot.instrumentation:instrumentation-jdbc:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-redis:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-apache-http-client:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-okhttp:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-http-url-connection:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-log4j:$instrumentationVersion"
    runtime "org.glowroot.instrumentation:instrumentation-logback:$instrumentationVersion"

    testCompile 'junit:junit:4.12'
}

// region Publishing properties

projectPomName = project.msftAppInsights + " Java Agent"
projectPomDescription = "This is the Java agent of " + project.msftAppInsightsJavaSdk

whenPomConfigured = { p ->
    p.dependencies = []
}

// endregion Publishing properties
